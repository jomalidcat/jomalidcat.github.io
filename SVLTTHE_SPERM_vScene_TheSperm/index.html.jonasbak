<!doctype html>
<html lang="en-us">
  <head>
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-71270527-5"></script>
    <script>
        window.dataLayer = window.dataLayer || [];
        function gtag(){dataLayer.push(arguments);}
        gtag('js', new Date());

        gtag('config', 'UA-71270527-5');
    </script>
    <meta charset="utf-8">
    <link rel="shortcut icon" type="image/x-icon" href="favicon.ico"/>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title>Sensavis Visual Learning Tool - WebGL</title>
    <style>
      @import url('https://fonts.googleapis.com/css?family=Noto+Sans+TC');
      body {
        font-family: 'Noto Sans TC';
        margin: 0;
        padding: none;
        height: 0px;
        overflow: hidden;
      }

      @keyframes fade-in {
          from {
              opacity:0;
          }
          to {
              opacity:1;
          }
      }
      @-moz-keyframes fade-in { /* Firefox */
          from {
              opacity:0;
          }
          to {
              opacity:1;
          }
      }
      @-webkit-keyframes fade-in { /* Safari and Chrome */
          from {
              opacity:0;
          }
          to {
              opacity:1;
          }
      }
      @-o-keyframes fade-in { /* Opera */
          from {
              opacity:0;
          }
          to {
              opacity: 1;
          }
      }​
      @keyframes fade-out {
          from {
              opacity:1;
          }
          to {
              opacity:0;
          }
      }
      @-moz-keyframes fade-out { /* Firefox */
          from {
              opacity:1;
          }
          to {
              opacity:0;
          }
      }
      @-webkit-keyframes fade-out { /* Safari and Chrome */
          from {
              opacity:1;
          }
          to {
              opacity:0;
          }
      }
      @-o-keyframes fade-out { /* Opera */
          from {
              opacity:1;
          }
          to {
              opacity: 0;
          }
      }

      video {
        display: block;
        position: absolute;
        left: 50%;
        top: 50%;
        bottom: 50%;
        margin-left: -256px;
        margin-top: -256px;
        pointer-events: none;
        -webkit-user-select: none; /* Safari */        
        -moz-user-select: none; /* Firefox */
        -ms-user-select: none; /* IE10+/Edge */
        user-select: none; /* Standard */
        opacity: 1;
      }

      video.loading {
        -moz-animation: fade-in 0.5s ease-in forwards; /* Firefox */
        -webkit-animation: fade-in 0.5s ease-in forwards; /* Safari and Chrome */
        -o-animation: fade-in 0.5s ease-in forwards; /* Opera */
        animation: fade-in 0.5s ease-in forwards;
      }

      video.done {
        -moz-animation: fade-out 0.3s ease-in forwards; /* Firefox */
        -webkit-animation: fade-out 0.3s ease-in forwards; /* Safari and Chrome */
        -o-animation: fade-out 0.3s ease-in forwards; /* Opera */
        animation: fade-out 0.3s ease-in forwards;
      }


    /*.emscripten { position: absolute; top: 0px; left: 0px; padding-right: 0; margin-left: auto; margin-right: auto; display: block; }*/
	  .inking { z-index: 2; position: absolute; top: 0px; left: 0px; padding-right: 0; margin-left: auto; margin-right: auto; display: none; }
	   
	  
      div.emscripten { text-align: center; }      
      div.emscripten_border { 
        border: 0px; 
        position: absolute;
        width: 100%;
        height: 100%;
      }
      /* the canvas *must not* have any border or padding, or mouse coords will be wrong */
      canvas.emscripten { 
        display: block;
        position: absolute;
        border: 0px none; 
        padding: 0px !important;
        margin: 0px !important;
        top:0px;
        left:0px;
        width: 100% !important; 
        height: 100% !important; 
        z-index: 0 !important;
        background-color: #343334 !important;
        -webkit-user-select: none; /* Safari */        
        -moz-user-select: none; /* Firefox */
        -ms-user-select: none; /* IE10+/Edge */
        user-select: none; /* Standard */
      }

      canvas.inking { 
        border: 0px none; 
        background-color: #00000000; 
        pointer-events: none;
        -webkit-user-select: none; /* Safari */        
        -moz-user-select: none; /* Firefox */
        -ms-user-select: none; /* IE10+/Edge */
        user-select: none; /* Standard */
        cursor: none;
      }

      div.loading {
        display: block;
        margin: 0 auto;
        position: absolute;
        top: 0px;
        left: 0px;
        width: 100%;
        height: 100%;
        pointer-events: none;
        -webkit-user-select: none; /* Safari */        
        -moz-user-select: none; /* Firefox */
        -ms-user-select: none; /* IE10+/Edge */
        user-select: none; /* Standard */
      }

      div.loading.progress {
        background-color: #343334FF;
        -webkit-transition: background 0.3s ease-out;  
        -moz-transition: background 0.3s ease-out;  
        -o-transition: background 0.3s ease-out;  
        transition: background 0.3s ease-out; 
      }
      div.loading.done {
        background-color: #34333400;
        -webkit-transition-delay: 0.35s;
        -moz-transition-delay: 0.35s;
        -o-transition-delay: 0.35s;
        transition-delay: 0.35s;
        -webkit-transition-duration: 0.4s;
        -moz-transition-duration: 0.4s;
        -o-transition-duration: 0.4s;
        transition-duration: 0.4s;
        -webkit-transition-property: background ease-out;  
        -moz-transition-property: background ease-out;  
        -o-transition-property: background ease-out;  
        transition-property: background ease-out; 
      }

      div.progressbarbackground {
        position: absolute;
        background-color: #29292900;
        margin: 0 auto;
        border: 1px blue;
        width: 80%;
        height: 6px;
        left:0px;
        right:0px;
        top:calc(50% + 250px);
      }

      div.progressbarbackground.show {
        background-color: #292929FF;
      }

      div.progressbarbackground.hide {
        background-color: #29292900;
      }

      div.progressbar {
        background-color: #6bc19e00;
        height:100%;
        -webkit-transition: width 0.2s ease-in-out;  
        -moz-transition: width 0.2s ease-in-out;  
        -o-transition: width 0.2s ease-in-out;  
        transition: width 0.2s ease-in-out;

        -webkit-transition: background-color 0.3s ease-in-out;  
        -moz-transition: background-color 0.3s ease-in-out;  
        -o-transition: background-color 0.3s ease-in-out;  
        transition: background-color 0.3s ease-in-out;
      }
      div.progressbar.show {
        background-color: #6bc19eff;
      }

      div.progressbar.hide {
        background-color: #6bc19e00;
      }

      #emscripten_logo {
        display: inline-block;
        margin: 0;
        pointer-events: none;
      }
		
	  #buttonHolder{ text-align: center; }

      .outputText {
        height: 100px;
        width: 100px;
        margin: 0;
        margin-top: 20px;
        margin-left: 20px;
        display: inline-block;
        vertical-align: top;
        z-index: 7;
        /*background-color: rgb(107, 193, 158);*/
        background-color: black;
      }

      @-webkit-keyframes rotation {
        from {-webkit-transform: rotate(0deg);}
        to {-webkit-transform: rotate(360deg);}
      }
      @-moz-keyframes rotation {
        from {-moz-transform: rotate(0deg);}
        to {-moz-transform: rotate(360deg);}
      }
      @-o-keyframes rotation {
        from {-o-transform: rotate(0deg);}
        to {-o-transform: rotate(360deg);}
      }
      @keyframes rotation {
        from {transform: rotate(0deg);}
        to {transform: rotate(360deg);}
      }

      #status {
      	position: absolute;
        margin: auto;
        font-weight: medium;
        text-align: center;
        color: #6bc19e;
        line-height: 30px;
        top:calc(50% + 210px);
        
        left: 0px;
        right: 0px;
        pointer-events: none;
      }

      #status white {
        color: #FFFFFF;
      }

      #status green {
        color: #6bc19e;
      }

      #view {
        position: absolute;
        display: block;
        bottom: 64px;
        left:0px;
        right:0px;
        margin: 0px auto;
        width: fit-content;
        font-weight: bold;
        text-align: center;
        color: rgb(255, 255, 255);
        z-index: 6;
        height: 20px;
        line-height: 20px;
        pointer-events: none;
      }

      #progress {
        height: 20px;
        width: 30px;
        z-index: 7;
        pointer-events: none;
      }

      #controls {
        display: inline-block;
        float: none;
        vertical-align: top;
        margin-top: 30px;
        margin-right: 20px;
		    text-align: center;
      }

      #output {
        width: 100%;
        height: 20px;
        margin: 0 auto;
        margin-top: 10px;
        border-left: 0px;
        border-right: 0px;
        padding-left: 0px;
        padding-right: 0px;
        display: block;
        background-color: black;
        color: white;
        font-family: 'Lucida Console', Monaco, monospace;
        outline: none;
      }

      .navigation-button2 {
	    /*background-color: rgb(100,100,100); */
	    display: block;
	    background-image: url("viewsMenuIcon_next.png") 128px 128px no-repeat;
	    cursor: pointer;
	    padding: 0px;
	    margin: 0px;
	    border-radius: 0px;
	    font-family: "Arial", Gadget, sans-serif;
	    font-size: 12px;    
	    color:  rgb(100,100,100);
	    text-align: center;
	    z-index: 5;
	    position: relative;
	}

	 #sensavis_logo {

		position: relative;
    /*text-align: center;*/
    pointer-events: none;
    width: 100%;
  }
  img.logo {
    position: absolute;
    margin: auto;
    opacity: 1;  
    top: 5px;
    left: 15px;
    -webkit-transition: opacity 0.5s ease-in-out;
    -moz-transition: opacity 0.5s ease-in-out;
    -o-transition: opacity 0.5s ease-in-out;
    transition: opacity 0.5s ease-in-out;
  }
  img.logo.hide {

    opacity: 0;
  }

  .vignette-gradient {
    position: absolute;
    display: none;
    bottom: 0px;
    border: 0px;
    width: 100%;
    height: 140px;
    background-image: linear-gradient(#00000000, #00000060); 
    z-index: 5;
    pointer-events: none;
    -webkit-user-select: none; /* Safari */        
    -moz-user-select: none; /* Firefox */
    -ms-user-select: none; /* IE10+/Edge */
    user-select: none; /* Standard */
  }

	.navigation-button-holder 
	{
    grid-auto-flow: column;
    grid-gap: 8px;
    display: grid;
    position: absolute;
    align-content: center;
    justify-content: center;
    left: 0px;
    right:0px;
    bottom: 10px;
    margin: 0px auto;
		width: fit-content;
    z-index: 6;
    -webkit-user-select: none; /* Safari */        
    -moz-user-select: none; /* Firefox */
    -ms-user-select: none; /* IE10+/Edge */
    user-select: none; /* Standard */
    pointer-events: none;
  }
  
  .navigation-button-holder.view
  {
    position: relative;
    bottom: 0px;
    margin: 0px auto;
  }
	

	
	.inking-control-holder
	{  
    grid-auto-flow: column;
		grid-gap: 4px;
		display: none;/* display: grid to display regularly */
		position: absolute;
    align-content: center;
    justify-content: center;
    right: 0px;
    left: 0px;
    top:5px;
    margin:0px auto;
    width: -moz-fit-content;
    width: fit-content;
		border-radius: 15px;
    padding: 10px;
		z-index: 5;    
		color: rgb(0, 0, 0);	
		background-color: #11111150;
		-webkit-user-select: none; /* Safari */        
		-moz-user-select: none; /* Firefox */
		-ms-user-select: none; /* IE10+/Edge */
		user-select: none; /* Standard */
		pointer-events: auto;

	}
	
	.interaction-control-text
	{
		display: inline-block;
    position: relative;
		vertical-align: bottom;
    width: 100%;
    line-height: 18px;
		float: right;
    text-align: left;
    padding: 8px 0px 2px 0px;
		color: rgb(240, 240, 240);
    pointer-events: none;
    font-size: 14px;
	}
	
	.interaction-control-slider-text
	{
		display: inline-block;
    position: relative;
		vertical-align: bottom;
    width: 100%;
    line-height: 18px;
		float: right;
		text-align: left;
    padding: 8px 0px 2px 0px;
		color: rgb(240, 240, 240);
    pointer-events: none;
    font-size: 14px;
	}

	button:focus {
    outline:none;
  }
  
  ::-moz-focus-inner {
    border:0;
  }

	button.inking-button {
    display: block;
    position: relative;
    height: 24px;
    width: 24px;
    opacity: 0.7;
    padding:0px;
    border-radius: 50%;
    background-color: transparent;
    background-size: 24px;
    cursor: pointer;
    -webkit-transition: opacity 0.2s;
    -moz-transition: opacity 0.2s;
    -o-transition: opacity 0.2s;
    transition: opacity 0.2s;
    -webkit-user-select: none; /* Safari */        
    -moz-user-select: none; /* Firefox */
    -ms-user-select: none; /* IE10+/Edge */
    user-select: none; /* Standard */
    pointer-events: auto;
  }

  button.inking-button.red {
    background-image: url(inkingRed.png);
    border: 0px;
    border-color: #FF0000;
  }

  button.inking-button.green {
    background-image: url(inkingGreen.png);
    border: 0px;
    border-color: #00FF00;
  }

  button.inking-button.blue {
    background-image: url(inkingBlue.png);
    border: 0px;
    border-color: #0000FF;
  }

  button.inking-button.yellow {
    background-image: url(inkingYellow.png);
    border: 0px;
    border-color: #FFFF00;
  }

  button.inking-button.white {
    background-image: url(inkingWhite.png);
    border: 0px;
    border-color: #FFFFFF;
  }

  button.inking-button.black {
    background-image: url(inkingBlack.png);
    border: 0px;
    border-color: #000000;
  }

  button.inking-button.clear {
    background-image: url(inkingMenuIcon_clear.png);
    border-radius: 5px;
    border: 0px;
    border-color: #000000;
  }

  button.inking-button.erase {
    background-image: url(inkingMenuIcon_erase.png);
    border-radius: 5px;
    border: 0px;
    border-color: #000000;
  }

  button.inking-button:hover {
    opacity: 1;
    border: 2px;
  }

  input[type=range].inking-slider {
    -moz-appearance: none;
    -webkit-appearance: none;
    display: block;
    position: relative;
    height: 6px;
    width: 64px;
    background: #74BF9C;
    outline: none;
    opacity: 0.7;
    border-radius: 6px;
    margin: 9px 0px;
    -webkit-transition: opacity 0.2s;
    -moz-transition: opacity 0.2s;
    -o-transition: opacity 0.2s;
    transition: opacity 0.2s;
    pointer-events: auto;
  }

  input[type=range].inking-slider::-moz-focus-outer {
    border:0;
  }

  input[type=range].inking-slider::-moz-range-track {
    background-color: #74BF9C;
  }

  input[type=range].inking-slider:hover {
    opacity: 1;
  }

  input[type=range].inking-slider::-webkit-slider-thumb {
    -webkit-appearance: none;
    appearance: none;
    width: 20px;
    height: 20px;
    border-radius: 50%;
    background: #FFFFFF;
    cursor: pointer;
  }

  input[type=range].inking-slider::-moz-range-thumb {
    appearance: none;
    width: 20px;
    height: 20px;
    border-radius: 50%;
    background: #FFFFFF;
    cursor: pointer;
  }

  .dot.inking-size-indicator {
    display: block;
    height: 24px;
    width: 24px;
    border-radius: 50%;
    border: 1px white solid;
    background-color: white;
    margin: auto;
    -webkit-user-select: none; /* Safari */        
    -moz-user-select: none; /* Firefox */
    -ms-user-select: none; /* IE10+/Edge */
    user-select: none; /* Standard */
    pointer-events: none;
  }

  .dot.inking-size-indicator.erase {
    border: 1px #CCCCCC solid;
    background-color: transparent;
  }

  button.navigation-button {
    display: block;
    position: relative;
    padding: 0px;
    height: 46px;
    width: 46px;
    background-color: transparent;
    background-size: 46px;  
    border: 0px;      
    cursor: pointer;
    -webkit-user-select: none; /* Safari */        
    -moz-user-select: none; /* Firefox */
    -ms-user-select: none; /* IE10+/Edge */
    user-select: none; /* Standard */
    pointer-events: auto;
  }

  button.navigation-button.prev {
    background-image: url(viewsMenuIcon_prev.png);
  }

  button.navigation-button.prev:hover {
    background-image: url(viewsMenuIcon_prevPressed.png);
  }

  button.navigation-button.next {
    background-image: url(viewsMenuIcon_next.png);
  }

  button.navigation-button.next:hover {
    background-image: url(viewsMenuIcon_nextPressed.png);
  }

  button.navigation-button.view {
	background-size: 32px;  
	height: 32px;
    width: 32px;
  }
  
  button.navigation-button.view.play {
    background-image: url(viewsMenuIcon_play.png);
  }

  button.navigation-button.view.pause {
    background-image: url(viewsMenuIcon_pause.png);
  }

  button.navigation-button.view.unselected {
    background-image: url(viewsMenuIcon_unselected.png);
  }

  div.interaction-container {
    position: absolute;
    display: grid;
    top:5px;
    grid-auto-flow: row;
    grid-gap: 8px;
    width: fit-content;
    align-items: start;
    z-index: 5; 
    -webkit-user-select: none; /* Safari */        
    -moz-user-select: none; /* Firefox */
    -ms-user-select: none; /* IE10+/Edge */
    user-select: none; /* Standard */
    pointer-events: none;
  }

  div.interaction-container.right {
    right: 15px;
    justify-items: right;
  }

  div.interaction-container.left {
    left: 15px;
    justify-items: left;
  }

  button.menu-button {
    position: relative;
    opacity: 0.7;
    width: 50px;
    height: 50px;
    display: block;
    cursor: pointer;
    top:0px;
    right: 0px;
    padding: 0px;
    background-size: 50px;
    background-color: transparent;
    background-repeat: no-repeat;
    border-style: none; 
    -webkit-transition: opacity 0.1s;
    -moz-transition: opacity 0.1s;
    -o-transition: opacity 0.1s;
    transition: opacity 0.1s;
    pointer-events: auto;
  }

  button.menu-button.interaction {
    background-image: url(interactionMenuIcon.png);
  }

  button.menu-button.back {
    background-image: url(backMenuIcon.png);
  }

  button.menu-button.fullscreen {
    background-image: url(fullscreenIcon.png);
  }

  button.menu-button.smallscreen {
    background-image: url(smallscreenIcon.png);
  }

  button.menu-button:hover {
    opacity: 0.4;
  }

  button.menu-button:active {
    opacity: 1;
  }

  .interaction-control-holder
  {
    grid-row: auto;
    display: none;/* display: grid to display regularly */
    position: relative;
    width: fit-content;
    min-width: 100px;
	max-height: 540px;
    float: right;
    border-radius: 15px;
    padding: 10px;
    color: rgb(0, 0, 0);  
    background-color: #11111150;
	overflow-y: auto;
	pointer-events: auto;
  }

	/*.checkbox {
	  position: relative;
	  display: inline-block;
	  width: 60px;
	  height: 34px;
	}*/

	.slidecontainer {
		width: 100%;
	}

	input[type=range].slider {
    display: inline-block;
		-webkit-appearance: none;
		-moz-appearance: none;
		width: 100%;
    min-width: 120px;
		height: 6px;
		border-radius: 6px;
    margin: 9px 0px;
		background: #74BF9C;
		outline: none;
		opacity: 0.7;
		-webkit-transition: opacity 0.2s;
		-moz-transition: opacity 0.2s;
    -o-transition: opacity 0.2s;
		transition: opacity 0.2s;
    pointer-events: auto;
		vertical-align: top;
	}

  input[type=range].slider::-moz-focus-outer {
    border:0;
  }

  input[type=range].slider::-moz-range-track {
    background-color: #74BF9C;
  }

	input[type=range].slider:hover {
		opacity: 1;
	}

	input[type=range].slider::-webkit-slider-thumb {
		-webkit-appearance: none;
		appearance: none;
		width: 20px;
		height: 20px;
		border-radius: 50%;
		background: #FFFFFF;
		cursor: pointer;
	}

	input[type=range].slider::-moz-range-thumb {
		appearance: none;
		width: 20px;
		height: 20px;
		border-radius: 50%;
		background: #FFFFFF;
		cursor: pointer;
	}

	.switch {
	  position: relative;
	  display: inline-block;
    float: right;
	  width: 54px;
	  height: 30px;
    pointer-events: auto;
	  vertical-align: middle;
	}

	.switch input {display:none;}

	.toggle {
	
	  position: absolute;
	  cursor: pointer;
	  top: 0;
	  left: 0;
	  right: 0;
	  bottom: 0;
	  background-color: #ccc;
	  -webkit-transition: background-color 0.2s;
	  transition: background-color 0.2s;
	  z-index: 6;
	}
	
	.pushbutton {
	  
	  min-width: 130px;
	  min-height: 30px;
	  position: absolute;
	  cursor: pointer;
	  top: 0;
	  left: 0;
	  right: 0;
	  bottom: 0;
	  text-align: center;
	  color: rgb(240, 240, 240);
	  background-color: #74BF9C;
	  line-height: 18px;
	  z-index: 6;
	  font-size: 14px;
	  border-radius: 30px;
	}
	
/* toggle was 26px, rounder border 34px */
	.toggle:before {
	  position: absolute;
	  content: "";
	  height: 22px;
	  width: 22px;
	  left: 4px;
    bottom: 4px;
    background-color: white;
    -webkit-transition: transform .2s;
    transition: transform .2s;
  }

  input:checked + .toggle {
    background-color: #74BF9C;
  }

  input:focus + .toggle {
    box-shadow: 0 0 1px #2196F3;
  }

  input:checked + .toggle:before {
    -webkit-transform: translateX(26px);
    -ms-transform: translateX(26px);
    transform: translateX(26px);
  }

  /* Rounded sliders */
  .toggle.round {
    border-radius: 30px;
  }

  .pushbutton.round {
    border-radius: 30px;
  }
  
  .toggle.round:before {
    border-radius: 50%;
  }

  .inking-cursor-holder {
    position: absolute;
    visibility: hidden;
    display: flex;
    top:0px;
    left: 0px;
    height: 32px;
    width: 32px;
    -webkit-user-select: none; /* Safari */        
    -moz-user-select: none; /* Firefox */
    -ms-user-select: none; /* IE10+/Edge */
    user-select: none; /* Standard */
    pointer-events: none;
    z-index: 3;
  }

  .inking-cursor {
    position: relative;
    height: 24px;
    width: 24px;
    margin: auto;
    left:-50%;
    top:-50%;
    border-radius: 50%;
    border: 1px white solid;
    background-color: transparent;
    -webkit-user-select: none; /* Safari */        
    -moz-user-select: none; /* Firefox */
    -ms-user-select: none; /* IE10+/Edge */
    user-select: none; /* Standard */
    pointer-events: none;
  }

    </style>
  </head>

  <!--<body bgcolor="#6bc19e"> -->
  <body onload="inkingInit();" bgcolor="#FFFFFF"> 
      
  <div id="fullscreen-enclosure" style="position: absolute;top:0px;left:0px;width: 100%;height: 100%;">
  <!-- <a link="#FFFFFF" href="http://www.sensavis.com"> -->
  <div class="vignette-gradient" id="vignette-gradient"></div>

  <div class="sensavis_logo" id='sensavis_logo'>
    <img class="logo" src="sensavis_watermark_white.png" id='toplogo' width="255" height="44" style="z-index: 4; opacity: 0.7;"/><!-- width="309" height="125"/> -->
    <img class="logo" src="sensavis_watermark.png" id='toplogo_loading' width="255" height="44" style="z-index: 10;"/><!-- width="309" height="125"/> -->
  </div>
  <!-- </a> -->
  <div class="status green" id='status' style="z-index: 8;">Downloading...</div>


  <div class="view" id='view'></div>
  <div class="navigation-button-holder" id='button-place-holder' disabled>
    <button type="submit" class="navigation-button prev" id="prevButton" disabled autocomplete="off" onclick="onPrevClick()"></button>
	
	<!-- grid of view buttons  -->
	<div id='view-button-place-holder' class="navigation-button-holder view">
    </div>
	
	<button type="submit" class="navigation-button next" id="nextButton" disabled autocomplete="off" onclick="onNextClick()"></button>
  
  </div>
  <div class="inking-control-holder" id='inking-control' disabled>
    <button type="submit" class="inking-button red"     id='redButton' disabled autocomplete="off" onclick="inkingSetLineColor('red')"></button>
    <button type="submit" class="inking-button green"   id='greenButton' disabled autocomplete="off" onclick="inkingSetLineColor('#66cc33')"></button>
    <button type="submit" class="inking-button blue"    id='blueButton' disabled autocomplete="off" onclick="inkingSetLineColor('blue')"></button>      
    <button type="submit" class="inking-button yellow"  id='yellowButton' disabled autocomplete="off" onclick="inkingSetLineColor('yellow')"></button>
    <button type="submit" class="inking-button white"   id='whiteButton' disabled autocomplete="off" onclick="inkingSetLineColor('white')"></button>
    <button type="submit" class="inking-button black"   id='blackButton' disabled autocomplete="off" onclick="inkingSetLineColor('black')"></button>
    <button type="submit" class="inking-button erase"   id='eraserButton' disabled autocomplete="off" onclick="inkingEnableEraser('black')"></button>
		<button type="submit" class="inking-button clear"   id='clearButton' disabled autocomplete="off" onclick="inkingClearContext()"></button>
    <input type="range" class="inking-slider" id='inkingWidth' min="1" max="30" step="1" value="3" oninput="inkingSetLineWidth(value)">
    <div style="width: 24px;height: 24px;display: flex;"><span class="dot inking-size-indicator" id='inkSizeIndicator'></span></div>
  </div>
  <div class="interaction-container right">
    <button type="submit" class="menu-button interaction" id="interactionMenu" onclick="toggleMenu('interaction-control')"></button>
    <div class="interaction-control-holder" id='interaction-control' style="visibility: visible;"></div>
  </div>
  <div class="interaction-container left">
    <!--<button type="submit" class="menu-button fullscreen" id="interactionFullscreen" onclick="toggleFullscreen()"></button>-->
  </div>
  <div class="emscripten">
    <progress value="0" max="100" id="progress" hidden=1></progress>
  </div>

  <div class="emscripten_border">
    <canvas class="emscripten" id="canvas" oncontextmenu="event.preventDefault()"></canvas>
    <canvas class="inking" id="inking" oncontextmenu="event.preventDefault()"></canvas>
  </div>


  <!-- Loading Canvas -->
  <div class="loading progress" id="loadingoverlay" style="z-index: 7;">
    <video class="loading" id="loadingvid" autoplay loop muted preload="auto" ><source src="loadinganimation.mp4" type="video/mp4">
    </video>
    
    <div class="progressbarbackground show" id="progressbarbackground" style="z-index: 7;">
      <div class="progressbar show" id="progressbar" style="width:0%;"></div>
    </div>
  </div>
  <div class="inking-cursor-holder" id="inkingCursorHolder"><div class="inking-cursor" id="inkingCursor"></div></div>
  <br>
  </div>
    <!-- <textarea id="output" rows="8"></textarea> -->
    

    <script type='text/javascript'>

		var inkingCanvas;
		var inkingCanvasContext;
		var inkingIsDrawing = false;
		var inkingLineWidth = 4;
		var inkingStrokeStyle = 'white'
		var inkingEnabled = false;
		var inkingTouchX = 0;
		var inkingTouchY = 0;
		var inkingInitialized = false;
    var inkingCursor = document.getElementById('inkingCursor');
		var inkingCursorHolder = document.getElementById('inkingCursorHolder');
		
		function inkingGetTouchPosition(e) {
        if (!e)
            var e = event;

			if (e.touches) {
				if (e.touches.length == 1) { 
					var touch = e.touches[0]; 
					inkingTouchX=touch.pageX-touch.target.offsetLeft;
					inkingTouchY=touch.pageY-touch.target.offsetTop;
				}
			}
		}
	
		function inkingTouchMove(e) {
			
			inkingGetTouchPosition(e);
						
			var x = inkingTouchX;
			var y = inkingTouchY;
			
			inkingCursorHolder.style.left = inkingTouchX+'px';
			inkingCursorHolder.style.top = inkingTouchY+'px';
				
			inkingCanvasContext.lineTo(x,y); // e.clientX, e.clientY);
			inkingCanvasContext.stroke();
			
			event.preventDefault();
			
		}
		
		function inkingResize(e) {
			
			inkingInit();
		}
		
		function inkingTouchStart(e) {
			
			inkingGetTouchPosition(e);

      inkingCursorHolder.style.visibility = 'visibile';
						
			var x = inkingTouchX;
			var y = inkingTouchY;
					
			inkingCanvasContext.beginPath();
			
			inkingCanvasContext.stroke();
			inkingCanvasContext.lineJoin = inkingCanvasContext.lineCap = 'round';
			inkingCanvasContext.moveTo(x,y); // e.clientX, e.clientY);
			inkingCanvasContext.lineTo(x,y); // e.clientX, e.clientY);
			inkingCanvasContext.stroke();
							
			event.preventDefault();
		}

    function inkingTouchEnd(e) {
      inkingCursorHolder.style.visibility = 'hidden';
    }
			
		function inkingInit() {
		
			inkingCanvas = document.getElementById("inking");
				
			inkingCanvas.width = window.innerWidth;
			inkingCanvas.height = window.innerHeight;
			
			inkingCanvasContext = inkingCanvas.getContext('2d');
		
      inkingSetLineColor(inkingStrokeStyle);
      inkingSetLineWidth(inkingLineWidth);
			
      // One time initialization
			if (inkingInitialized == false)
			{
        buildTranslationTable();
        svltJS_addFullscreenControl(false);
				svltJS_addInkingControl(false);
				inkingCanvas.addEventListener('touchstart', inkingTouchStart, false);
        inkingCanvas.addEventListener('touchmove', inkingTouchMove, false);
				inkingCanvas.addEventListener('touchend', inkingTouchEnd, false);
				window.addEventListener('resize', inkingResize, false);
				inkingInitialized = true;
				document.getElementById('inking-control').style.display = "none";

        document.getElementById('inkingWidth').addEventListener("mouseup", function (event) {
        event.target.blur(); }, false);
			}
			
			inkingCanvas.onmousedown = function(e) {
						
				var x = e.clientX; 
				var y = e.clientY;
				  
				inkingCanvasContext.beginPath();
				inkingIsDrawing = true;
				inkingCanvasContext.stroke();
				inkingCanvasContext.lineJoin = inkingCanvasContext.lineCap = 'round';
				inkingCanvasContext.moveTo(x,y); // e.clientX, e.clientY);
				// canvasContext.shadowBlur = 10;
				//canvasContext.shadowColor = 'rgb(0, 0, 0)';
				// canvasContext.strokeStyle = 'blue';
			};
		
			inkingCanvas.onmousemove = function(e) {

        inkingCursorHolder.style.visibility = 'visible'
        inkingCursorHolder.style.left = e.clientX+'px';
        inkingCursorHolder.style.top = e.clientY+'px';

			  if (inkingIsDrawing) {

				var x = e.clientX;
				var y = e.clientY;
		
				inkingCanvasContext.lineTo(x,y); // e.clientX, e.clientY);
				inkingCanvasContext.stroke();
				
			  }
			};
		
			inkingCanvas.onmouseup = function() {
			  inkingIsDrawing = false;
			};
		}
		
		function inkingDeactivate() {
			
			inkingEnabled = false;
			// inkingCanvas.style.display = 'none';
			inkingCanvas.style.pointerEvents = 'none';
			
			var buttonRed = document.getElementById('redButton');
			var buttonGreen = document.getElementById('greenButton');
			var buttonBlue = document.getElementById('blueButton');
			var buttonBlack = document.getElementById('blackButton');
			var buttonYellow = document.getElementById('yellowButton');
			var buttonWhite = document.getElementById('whiteButton');
			var buttonClear = document.getElementById('clearButton');
			var buttonEraser = document.getElementById('eraserButton');
			
			buttonRed.disabled = true;  
			buttonGreen.disabled = true; 
			buttonBlue.disabled = true;  
			buttonYellow.disabled = true;   
			buttonWhite.disabled = true;   
			buttonBlack.disabled = true;   
			buttonClear.disabled = true;   
			buttonEraser.disabled = true;
			
			document.getElementById('inking-control').style.display = "none";

      inkingCursorHolder.style.visibility = 'hidden';
		}
		
		function inkingActivate() {
			
			inkingEnabled = true;
			inkingCanvas.style.display = 'block';
			inkingCanvas.style.pointerEvents = 'auto';
			
	    var buttonRed = document.getElementById('redButton');
			var buttonGreen = document.getElementById('greenButton');
			var buttonBlue = document.getElementById('blueButton');
			var buttonBlack = document.getElementById('blackButton');
			var buttonYellow = document.getElementById('yellowButton');
			var buttonWhite = document.getElementById('whiteButton');
			var buttonClear = document.getElementById('clearButton');
			var buttonEraser = document.getElementById('eraserButton');
			
			buttonRed.disabled = false;  
			buttonGreen.disabled = false; 
			buttonBlue.disabled = false;  
			buttonYellow.disabled = false;   
			buttonWhite.disabled = false;   
			buttonBlack.disabled = false;   
			buttonClear.disabled = false;   
			buttonEraser.disabled = false;
			
			document.getElementById('inking-control').style.display = "grid";
			inkingCanvasContext.globalCompositeOperation="source-over";

			inkingSetLineWidth(inkingLineWidth);
		}

		function inkingSetLineColor(color) {
				
			inkingSetLineWidth(inkingLineWidth);

      indicator = document.getElementById('inkSizeIndicator');
      indicator.className = "dot inking-size-indicator";
      
      indicator.style.backgroundColor = color;
      indicator.style.borderColor = color;
			
			inkingStrokeStyle = color;
			inkingCanvasContext.strokeStyle = color;
			inkingCanvasContext.globalCompositeOperation="source-over";
		}
	
		function inkingEnableEraser(color) {
      indicator = document.getElementById('inkSizeIndicator');
      indicator.className = "dot inking-size-indicator erase";

      indicator.style.backgroundColor = 'transparent';
      indicator.style.borderColor = '#CCCCCC';

			inkingCanvasContext.globalCompositeOperation="destination-out";
		}
		
		function inkingSetLineWidth(width) {
      indicator = document.getElementById('inkSizeIndicator');
      var normalized = (width - 1) / (30 - 1);
      var indicatorSize = lerp(2,22,normalized);
      indicator.style.height = indicatorSize+'px';
      indicator.style.width = indicatorSize+'px';

      inkingCursor.style.height = width+'px';
      inkingCursor.style.width = width+'px';

			inkingLineWidth = width;
			inkingCanvasContext.lineWidth = width;
		}

		function inkingClearContext() {
			
			inkingIsDrawing = false;
			inkingCanvasContext.beginPath();
			inkingCanvasContext.fillStyle = 'rgba(0, 0, 200, 1.0)';
			// canvasContext.fillRect(0, 0, canvasContext.width, canvasContext.height);
			inkingCanvasContext.moveTo(0,0);
			inkingCanvasContext.canvas.width = inkingCanvasContext.canvas.width;
			inkingCanvasContext.clearRect(0,0, inkingCanvasContext.width, inkingCanvasContext.height);
			
			//console.debug("INKING CLEAR");
			inkingInit();
		}
		
      var statusElement = document.getElementById('status');
      var viewElement = document.getElementById('view');
      var progressElement = document.getElementById('progress');

      var hasInteractionControls = 0;
      var Module = {
        preRun: [],
        postRun: [],
        print: (function() {
          var element = document.getElementById('output');
          if (element) element.value = ''; // clear browser cache
          return function(text) {
            if (arguments.length > 1) text = Array.prototype.slice.call(arguments).join(' ');
            // These replacements are necessary if you render to raw HTML
            //text = text.replace(/&/g, "&amp;");
            //text = text.replace(/</g, "&lt;");
            //text = text.replace(/>/g, "&gt;");
            //text = text.replace('\n', '<br>', 'g');
            console.debug(text);
            if (element) {
              element.value += text + "\n";
              element.scrollTop = element.scrollHeight; // focus on bottom
            }
          };
        })(),
        printErr: function(text) {
          if (arguments.length > 1) text = Array.prototype.slice.call(arguments).join(' ');
          if (0) { // XXX disabled for safety typeof dump == 'function') {
            dump(text + '\n'); // fast, straight to the real console
          } else {
            console.error(text);
          }
        },
        canvas: (function() {
          var canvas = document.getElementById('canvas');

          // As a default initial behavior, pop up an alert when webgl context is lost. To make your
          // application robust, you may want to override this behavior before shipping!
          // See http://www.khronos.org/registry/webgl/specs/latest/1.0/#5.15.2
          canvas.addEventListener("webglcontextlost", function(e) { alert('WebGL context lost. You will need to reload the page.'); e.preventDefault(); }, false);

          return canvas;
        })(),
        setStatus: function(text) {
          if (!Module.setStatus.last) Module.setStatus.last = { time: Date.now(), text: '' };
          if (text === Module.setStatus.text) return;
          var m = text.match(/([^(]+)\((\d+(\.\d+)?)\/(\d+)\)/);
          var now = Date.now();
          if (m && now - Date.now() < 30) return; // if this is a progress update, skip it if too soon
          if (m) {
            text = m[1];
            progressElement.value = parseInt(m[2])*100;
            progressElement.max = parseInt(m[4])*100;
            progressElement.hidden = false;
          } else {
            progressElement.value = null;
            progressElement.max = null;
            progressElement.hidden = true;

          }
          statusElement.innerHTML = text;
        },
        setView: function(text) {
          // viewElement.innerHTML = text;
        },
        totalDependencies: 0,
        monitorRunDependencies: function(left) {
          this.totalDependencies = Math.max(this.totalDependencies, left);
        }
      };
      Module.setStatus('Downloading...');
      window.onerror = function(event) {
        // TODO: do not warn on ok events like simulating an infinite loop or exitStatus
        Module.setStatus('Exception thrown, see JavaScript console');
        Module.setStatus = function(text) {
          if (text) Module.printErr('[post-exception status] ' + text);
        };
      };

      
    </script>

    


    <script type='application/javascript' async>

      var isPlaying = 1;
	    var currentView = 1;
	    var numberOfViews = 0;
	  
      var selectedToggle = null;
      var totalProgress = 0;
      var dlBytesTotal = 0;
      var dlBytesLoaded = 0;

      function toggleMenu(menuID) {
        var menu = document.getElementById(menuID);
        if(menu.style.visibility == 'visible') {
          menu.style.visibility = 'hidden';
        } else {
          menu.style.visibility = 'visible';
        }
      }

      function toggleFullscreen() {
        var fullscreenEnclosure = document.getElementById('fullscreen-enclosure');
        if (fullscreenEnclosure.fullscreenElement == null) {
            fullscreenActivate();
          } else {  
            fullscreenDeactivate();
        }
      }

      function fullscreenActivate() {
        var fullscreenEnclosure = document.getElementById('fullscreen-enclosure');
        if (fullscreenEnclosure.requestFullscreen) {  
              fullscreenEnclosure.requestFullscreen();
            } else if (fullscreenEnclosure.mozRequestFullScreen) {  
              fullscreenEnclosure.mozRequestFullScreen();  
            } else if (fullscreenEnclosure.webkitRequestFullscreen) {  
              fullscreenEnclosure.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);  
            } else if (fullscreenEnclosure.msRequestFullscreen) {
              fullscreenEnclosure.msRequestFullscreen();
            }
      }

      function fullscreenDeactivate() {
        if (document.webkitExitFullscreen) {  
              document.webkitExitFullscreen();  
            } else if (document.mozCancelFullScreen) {  
              document.mozCancelFullScreen();  
            } else if (document.msExitFullscreen) {
              document.msExitFullscreen();
            } else if (document.exitFullscreen) {  
              document.exitFullscreen();  
            }  
      }

      document.addEventListener('webkitfullscreenchange', fullscreenHandler);
      document.addEventListener('mozfullscreenchange', fullscreenHandler);
      document.addEventListener('fullscreenchange', fullscreenHandler);
      document.addEventListener('MSFullscreenChange', fullscreenHandler);

      function fullscreenHandler()
      {
        var fullscreenButton = document.getElementById(999);

        if (document.fullscreenElement)
        {
          if(fullscreenButton.checked == false) {
            fullscreenButton.checked = true;
          }
        } else {
          if(fullscreenButton.checked == true) {
            fullscreenButton.checked = false;
          }
        }
      }

      function exitBack() {
          history.go(-1);
      }

		  // Activate UI, invoked by engine when scene is loaded
      function svltJS_onActivateUI() {
        
		//buttonPlay = document.getElementById('playButton');
		// Get first view
		buttonPlay = document.getElementById(10001);
		
        buttonPrev = document.getElementById('prevButton');
        buttonNext = document.getElementById('nextButton');
        statusText = document.getElementById('status');
        viewText = document.getElementById('view');
        gradient = document.getElementById('vignette-gradient');
        logo = document.getElementById('toplogo');

        gradient.style.display = "inline-block";

        buttonPlay.disabled = false;
        buttonPrev.disabled = false;
        buttonNext.disabled = false;
        viewText.disabled = false;

        statusText.style.color = "#FFFFFF";
        if(hasInteractionControls == 1) {
          setInteractionControl(true);
        }
        document.getElementById('toplogo_loading').className = "logo hide";
        document.getElementById('loadingoverlay').className = "loading done";
        document.getElementById('loadingvid').className = "done";
        document.getElementById('progressbarbackground').className = "progressbarbackground hide";
        document.getElementById('progressbar').className = "progressbar hide";
        Module.setStatus('');

        //document.getElementById('canvas').className = "emscripten playing";

      }

	  // -- Explicitly invoked view assignment from engine --------------------
      function svltJS_onSetCurrentView(view) {
        
		var oldView = currentView;
		var oldViewElement = document.getElementById(10000 + oldView);
		var newViewElement = document.getElementById(10000 + view);
					
		oldViewElement.className = "navigation-button view unselected";
		newViewElement.className = "navigation-button view pause";
		
		currentView = view;
      }

	  // -- Progress update ---------------------------------------------------
      function svltJS_onProgress(progress) {
        Module.setStatus('Starting...');
        loadingProgress(lerp(totalProgress,1.0,progress));
      }

	  
	  // -- Set Interaction control state ------------------------------------- 
      function setInteractionControl(bool) {
			if(bool) {
			  document.getElementById('interaction-control').style.display = "grid";
			}
			else {
			  document.getElementById('interaction-control').style.display = "none";  
			}
       }

		// -- Add View Control -----------------------------------------------
		
		function svltJS_onAddViewControl(viewIndex) {
	  
			console.log("Add view ", viewIndex);
						
			// Get placeholder
			var viewHolderElement = document.getElementById("view-button-place-holder");
			
			// Construct new view button
			var viewElement = document.createElement("button");

			if (viewIndex == 1)
				viewElement.className = "navigation-button view pause";
			else
				viewElement.className = "navigation-button view unselected";
			
			viewElement.type  = "submit";
			viewElement.name  = "view" + viewIndex;
			viewElement.id = (10000 + viewIndex);
			viewElement.disabled = false;
			
			viewElement.onclick  = function(e) {
						
				var viewId = 0;
				
				viewId = this.id - 10000;

				// Not currently active?
				if (currentView != viewId) {
				
					var oldView = currentView;
					var oldViewElement = document.getElementById(10000 + oldView);
					
					// Update current view
					currentView = viewId;
										
					// Mark as playing
					this.className = "navigation-button view pause";
					isPlaying = 1;
					
					// Mark old as unselected
					oldViewElement.className = "navigation-button view unselected";
							
					// Notify engine
					Module._svltWebAPI_SetView(viewId);
				}
				// Else toggle state
				else {
					  
				  switch(isPlaying) {
				  
					case 1:
					this.className = "navigation-button view play";
					isPlaying = 0;
					Module.ccall('svltWebAPI_AnimationPause')
					return(false);

					case 0:
					this.className = "navigation-button view pause";
					isPlaying = 1;
					Module.ccall('svltWebAPI_AnimationPlay')
					return(false);
				  }
					
				}
				
			}
			
			viewHolderElement.appendChild(viewElement);
			
			// Increase number of views
			numberOfViews++;
		}
	   	
		// -- Add Slider  control --------------------------------------------
		
      function svltJS_onAddSliderControl(sliderName, index, initValue, stepValue, minValue, maxValue) {
 
			var sliderElement = document.createElement("input");
			var sliderTextSpanElement = document.createElement("spane");			
			

			sliderTextSpanElement.className = "interaction-control-slider-text";
			sliderTextSpanElement.appendChild(document.createTextNode(sliderName));
			
			sliderElement.className = "slider";
			sliderElement.type  = "range";		
			sliderElement.min = minValue.toFixed(2);
			sliderElement.max = maxValue.toFixed(2);	
			sliderElement.value = initValue.toFixed(2);
			sliderElement.step = stepValue.toFixed(2);
			sliderElement.name  = sliderName;
			sliderElement.id = (1000 + index);
			hasInteractionControls = 1;

      sliderElement.addEventListener("mouseup", function (event) {
        event.target.blur(); }, false);

			sliderElement.oninput  = function(e) {
						
				if (isPlaying == 0) {
					  					
					var viewElement = document.getElementById(10000 + currentView);
					viewElement.className = "navigation-button view pause";
					
					// Invoke play in case paused
					isPlaying = 1;
					Module.ccall('svltWebAPI_AnimationPlay')
				}
					  
				var fValue = 0.0;
				
				fValue = this.value;

				// Module.ccall('svltWebAPI_UpdateSlider', ['number', 'number'], [this.id, fValue]);
				Module._svltWebAPI_UpdateSlider(this.id - 1000, fValue);
			}
			
			var parentElement = document.getElementById("interaction-control");
			parentElement.appendChild(sliderTextSpanElement);
			parentElement.appendChild(sliderElement);
			
      }

      // -- Add Inking control --------------------------------------------
      function svltJS_addFullscreenControl(initValue) {
 
      var labelElement = document.createElement("label");   
      var toggleElement = document.createElement("input");
      var spanElement = document.createElement("span");
      var spanTextElement = document.createElement("div");      
      var labelTextElement = document.createElement("label"); 
      
      spanTextElement.className = "interaction-control-text";
      var toggleTextElement = document.createTextNode("Fullscreen" + "  ");
      spanTextElement.innerHTML = getLocalizedString(svltJS_queryURLParameters("lang"),"Fullscreen"); //  appendChild(toggleTextElement);
      
      spanElement.className = "toggle round";
      labelElement.className = "switch";
      
      toggleElement.type  = "checkbox";
      toggleElement.checked = initValue;
      toggleElement.name  = "Fullscreen";
      toggleElement.id = 999;
      hasInteractionControls = 1;
      
      toggleElement.onclick = function(e) {
            
        if (this.checked) {
//            fullscreenActivate();

            navigator.xr.isSessionSupported('inline').then((supported) => {                                                                             
                console.error("XR inline VR available");                                                                                                      
                if (supported) {                                                                                                                              
                    console.error("supported flag true");                                                                                                     
                    var enterXrBtn = document.createElement("button");
                    enterXrBtn.innerHTML = "Enter VR";
                    document.body.appendChild(enterXrBtn);
                    
                    console.error(navigator.xr.requestSession('inline'));
                    console.error("XR Request session done");
		} else {
                    console.error("Session not supported: " + reason);
		}
	    })
	} else {
	    fullscreenDeactivate();
        };
      };
	  
      /**/      // Append toggle and span to label
      labelElement.appendChild(toggleElement);
      labelElement.appendChild(spanElement);
      
      // Append label to 
      var parentElement = document.getElementById("interaction-control");
      parentElement.appendChild(spanTextElement);
      parentElement.appendChild(labelElement);
	  /**/      
      };

	   	// -- Add Inking control --------------------------------------------
      function svltJS_addInkingControl(initValue) {
 
			var labelElement = document.createElement("label");		
			var toggleElement = document.createElement("input");
			var spanElement = document.createElement("span");
			var spanTextElement = document.createElement("div");			
			var labelTextElement = document.createElement("label");	
			
			spanTextElement.className = "interaction-control-text";
			var toggleTextElement = document.createTextNode("Inking" + "  ");
			spanTextElement.innerHTML = getLocalizedString(svltJS_queryURLParameters("lang"),"Inking"); //  appendChild(toggleTextElement);
			
			spanElement.className = "toggle round";
			labelElement.className = "switch";
			
			toggleElement.type  = "checkbox";
			toggleElement.checked = initValue;
			toggleElement.name  = "Inking";
			toggleElement.id = 1000;
			hasInteractionControls = 1;
			
			toggleElement.onclick = function(e) {
						
				if (this.checked) {
					inkingActivate();
				}
				else {
					inkingDeactivate();
				}
			}
					
			// Append toggle and span to label
			labelElement.appendChild(toggleElement);
			labelElement.appendChild(spanElement);
			
			// Append label to 
			var parentElement = document.getElementById("interaction-control");
			parentElement.appendChild(spanTextElement);
			parentElement.appendChild(labelElement);
			
      }
	   	// -- Add Toggle control --------------------------------------------
		
      function svltJS_onAddToggleControl(toggleName, index, initValue) {
 
			var labelElement = document.createElement("label");		
			var toggleElement = document.createElement("input");
			var spanElement = document.createElement("span");
			var spanTextElement = document.createElement("div");			
			var labelTextElement = document.createElement("label");	
			
			spanTextElement.className = "interaction-control-text";
			var toggleTextElement = document.createTextNode(toggleName + "  ");
			spanTextElement.innerHTML = toggleName; //  appendChild(toggleTextElement);
			
			spanElement.className = "toggle round";
			labelElement.className = "switch";
			
			toggleElement.type  = "checkbox";
			toggleElement.checked = initValue;
			toggleElement.name  = toggleName;
			toggleElement.id = index;
			hasInteractionControls = 1;
			
			toggleElement.onclick = function(e) {
					
				if (isPlaying == 0) {
					  					
					var viewElement = document.getElementById(10000 + currentView);
					viewElement.className = "navigation-button view pause";
					
					// Invoke play in case paused
					isPlaying = 1;
					Module.ccall('svltWebAPI_AnimationPlay')
				}
				
				var fValue = 0.0;
				
				if (this.checked)
					fValue = 1.0;
									
				// Module.ccall('svltWebAPI_UpdateToggle', ['number', 'number'], [this.id, fValue]);
				Module._svltWebAPI_UpdateToggle(this.id, fValue);
			}
					
			// Append toggle and span to label
			labelElement.appendChild(toggleElement);
			labelElement.appendChild(spanElement);
			
			// Append label to 
			var parentElement = document.getElementById("interaction-control");
			parentElement.appendChild(spanTextElement);
			parentElement.appendChild(labelElement);
			
      }
	  
	    function svltJS_onAddButtonControl(toggleName, index) {
 
			var labelElement = document.createElement("label");		
			var toggleElement = document.createElement("button");
			var spanElement = document.createElement("span");
			var spanTextElement = document.createElement("div");			
			var labelTextElement = document.createElement("label");	
			
			spanTextElement.className = "interaction-control-text";
			var toggleTextElement = document.createTextNode(toggleName + "  ");
			// spanTextElement.innerHTML = toggleName; //  appendChild(toggleTextElement);
			
			// spanElement.className = "pushbutton round";
			labelElement.className = "switch";
			
			toggleElement.className = "pushbutton";
			toggleElement.type = "button";
			toggleElement.value = "snugge"; // toggleName;
			toggleElement.innerHTML = toggleName;
			// toggleElement.checked = 0;
			toggleElement.name  = toggleName;
			toggleElement.id = 2000 + index;
			hasInteractionControls = 1;
			
			toggleElement.onclick = function(e) {
					
				if (isPlaying == 0) {
					  					
					var viewElement = document.getElementById(10000 + currentView);
					viewElement.className = "navigation-button view pause";
					
					// Invoke play in case paused
					isPlaying = 1;
					Module.ccall('svltWebAPI_AnimationPlay')
				}
									
				// Module.ccall('svltWebAPI_UpdateToggle', ['number', 'number'], [this.id, fValue]);
				Module._svltWebAPI_PushButton(this.id - 2000);
			}
					
			// Append toggle and span to label
			labelElement.appendChild(toggleElement);
			labelElement.appendChild(spanElement);
			
			// Append label to 
			var parentElement = document.getElementById("interaction-control");
			parentElement.appendChild(spanTextElement);
			parentElement.appendChild(labelElement);
			
      }
	  
		  // Page functions invoked by buttons and controls in page
	    function onNextClick() {

		
		    // Do nothing in case already playing and already playing
		    if ((numberOfViews == 1) && (isPlaying == 1))
			   return;
			
			var nextView = currentView;
			
			nextView++;
			
			if (nextView > numberOfViews)
				nextView = 1;
				
			var viewButtonElement = document.getElementById(10000 + nextView);
			
			// Simulate click
			viewButtonElement.onclick();
		}

		// Previous view
		function onPrevClick() {
			
		    // Do nothing in case already playing and already playing
		    if ((numberOfViews == 1) && (isPlaying == 1))
			   return;

			var nextView = currentView - 1;
			
			if (nextView == 0)
				nextView = numberOfViews;
					
			var viewButtonElement = document.getElementById(10000 + nextView);
			
			// Simulate click
			viewButtonElement.onclick();
		}

		function native() {

		   console.log("NATIVE");
		}

    function svltJS_queryURLParameters(paramName) {
      var pageURL = window.location.search.substring(1);
      var sURLVars = pageURL.split('&');
      for (var i = 0; i < sURLVars.length; i++) 
      {
        var sParameterName = sURLVars[i].split('=');
        if (sParameterName[0] == paramName) 
        {
            //console.log("URLParam: Parameter " + sParameterName[0] + " = Value " + sParameterName[1]);
            return sParameterName[1];
        }
      }
    }

    // Service worker code. Will require SSL to run.
      
      if ('serviceWorker' in navigator) {
        navigator.serviceWorker.addEventListener('message', event => handleMessage(event.data));

        window.addEventListener('load', function() {
          navigator.serviceWorker.register('sw.js',{scope: './'}).then(function(registration) {

            console.log('SW registration successfull: ', registration);
            if(registration.installing) {
              console.log('SW installing...');
            } else if(registration.waiting) {
              console.log('SW installed');
            } else if(registration.active) {
              console.log('SW active!');
              runSVLT();
            }
            //return navigator.serviceWorker.ready;
          }).catch(function(error) {
            // Show a message prompting the user to free up space, etc.
            console.log('SW registration failed: ', error);
            runSVLT();

          });
        });
      } else {
        runSVLT();
      }

      function handleMessage(data) {
        //console.log('Message property ', data.msg);
        if(data.msg == 'progressloaded') {
          dlBytesLoaded += data.loaded;
          DLProgress();
          
        } else if (data.msg == 'progresstotal') {
          dlBytesTotal += data.total;

        } else if (data.msg == 'runsvlt') {
          runSVLT();

        } else {
          console.log('Message property not recognized.');

        }
      }

      function runSVLT() {
        console.log('Starting SVLT...');
        Module.setStatus('Downloading...');

        var element = document.createElement("script");
        element.src = "svlt_web.js";
        document.body.appendChild(element);
      }
      
      function DLProgress() {
        if(dlBytesTotal > 7000000) {
          totalProgress = lerp(0.0,0.7,Math.min(dlBytesLoaded/dlBytesTotal, 1));
          loadingProgress(totalProgress);
        }        
      }

      function loadingProgress(progress) {
        var progressPercentage = Math.min(progress * 100,100);
        document.getElementById('progressbar').style.width = progressPercentage+'%';
      }

      function lerp(a,b,f)
      {
          return a + f * (b - a);
      }

      function getLocalizedString(lang, key) {
        if(lang != null) {
          var tLang = translationTable.get(lang)
          if(tLang != null) {
            var tKey = tLang.get(key);
            if(tKey != null){
              return tKey;
            }
          }
        }
        return key;
      }

      function buildTranslationTable() {
        var translationTable_enUS = new Map();
        translationTable_enUS.set("Inking","Inking");
        translationTable_enUS.set("Fullscreen","Fullscreen");

        var translationTable_svSE = new Map();
        translationTable_svSE.set("Inking","Ritverktyg");
        translationTable_svSE.set("Fullscreen","Fullskärm");

        var translationTable_deDE = new Map();
        translationTable_deDE.set("Inking","Zeichenwerkzeuge");
        translationTable_deDE.set("Fullscreen","Vollbildschirm");

        var translationTable_esES = new Map();
        translationTable_esES.set("Inking","Dibujar");
        translationTable_esES.set("Fullscreen","Pantalla Completa");

        var translationTable_fi = new Map();
        translationTable_fi.set("Inking","Piirtotyökalut");
        translationTable_fi.set("Fullscreen","Koko Näyttö");

        var translationTable_zhHant = new Map();
        translationTable_zhHant.set("Inking","繪圖工具");
        translationTable_zhHant.set("Fullscreen","全屏");

        var translationTable_zhHans = new Map();
        translationTable_zhHans.set("Inking","绘图工具");
        translationTable_zhHans.set("Fullscreen","全屏");


        translationTable.set("en-US",translationTable_enUS);
        translationTable.set("sv-SE",translationTable_svSE);
        translationTable.set("de-DE",translationTable_deDE);
        translationTable.set("es-ES",translationTable_esES);
        translationTable.set("fi",translationTable_fi);
        translationTable.set("zh-Hant",translationTable_zhHant);
        translationTable.set("zh-Hans",translationTable_zhHans);
      }

      var translationTable = new Map();

    </script>

  </body>
</html>
